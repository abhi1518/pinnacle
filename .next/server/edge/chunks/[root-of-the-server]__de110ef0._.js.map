{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["// // middleware.ts\n// import { NextResponse } from 'next/server';\n// import type { NextRequest } from 'next/server';\n\n// const PUBLIC_ROUTES = ['/login', '/signup', '/forgot-password'];\n\n// export function middleware(request: NextRequest) {\n//   const token = request.cookies.get('auth-token')?.value;\n\n//   const isPublic = PUBLIC_ROUTES.includes(request.nextUrl.pathname);\n\n//   // âœ… If user is logged in and on public route â†’ redirect to dashboard\n//   if (token && isPublic) {\n//     return NextResponse.redirect(new URL('/dashboard', request.url));\n//   }\n\n//   // ðŸ”’ If user is NOT logged in and tries to access protected page â†’ redirect to login\n//   if (!token && !isPublic) {\n//     return NextResponse.redirect(new URL('/login', request.url));\n//   }\n\n//   // âœ… Otherwise allow\n//   return NextResponse.next();\n// }\n\n// export const config = {\n//   matcher: [\n//     '/dashboard/:path*',\n//     '/beneficiaries/:path*',\n//     '/login',\n//     '/signup',\n//     '/forgot-password',\n//   ],\n// };\n\n\n// // import { cookies } from 'next/headers';\n\n// // export async function POST(req: Request) {\n// //   const { email, password } = await req.json();\n// //   const isAuthenticated = email === 'test@example.com' && password === '123';\n\n// //   if (isAuthenticated) {\n// //     cookies().set('auth-token', 'sample-jwt-or-session-token', {\n// //       httpOnly: true,\n// //       path: '/',\n// //     });\n\n// //     return new Response(JSON.stringify({ success: true }), { status: 200 });\n// //   }\n\n// //   return new Response(JSON.stringify({ error: 'Invalid credentials' }), { status: 401 });\n// // }\n\n\n// // 'use client';\n\n// // import { useRouter } from 'next/navigation';\n\n// // export default function LogoutButton() {\n// //   const router = useRouter();\n\n// //   const handleLogout = async () => {\n// //     await fetch('/api/logout', { method: 'POST' });\n// //     router.push('/login');\n// //   };\n\n// //   return <button onClick={handleLogout}>Logout</button>;\n// // }\n\n\n// // /app/api/logout/route.ts\n// // import { cookies } from 'next/headers';\n\n// // export async function POST() {\n// //   cookies().delete('auth-token');\n// //   return new Response(null, { status: 200 });\n// // }"],"names":[],"mappings":"AAAA,mBAAmB;AACnB,8CAA8C;AAC9C,kDAAkD;AAElD,mEAAmE;AAEnE,qDAAqD;AACrD,4DAA4D;AAE5D,uEAAuE;AAEvE,0EAA0E;AAC1E,6BAA6B;AAC7B,wEAAwE;AACxE,MAAM;AAEN,0FAA0F;AAC1F,+BAA+B;AAC/B,oEAAoE;AACpE,MAAM;AAEN,yBAAyB;AACzB,gCAAgC;AAChC,IAAI;AAEJ,0BAA0B;AAC1B,eAAe;AACf,2BAA2B;AAC3B,+BAA+B;AAC/B,gBAAgB;AAChB,iBAAiB;AACjB,0BAA0B;AAC1B,OAAO;AACP,KAAK;AAGL,6CAA6C;AAE7C,gDAAgD;AAChD,qDAAqD;AACrD,mFAAmF;AAEnF,8BAA8B;AAC9B,sEAAsE;AACtE,2BAA2B;AAC3B,sBAAsB;AACtB,aAAa;AAEb,kFAAkF;AAClF,SAAS;AAET,+FAA+F;AAC/F,OAAO;AAGP,mBAAmB;AAEnB,kDAAkD;AAElD,8CAA8C;AAC9C,mCAAmC;AAEnC,0CAA0C;AAC1C,yDAAyD;AACzD,gCAAgC;AAChC,UAAU;AAEV,8DAA8D;AAC9D,OAAO;AAGP,8BAA8B;AAC9B,6CAA6C;AAE7C,oCAAoC;AACpC,uCAAuC;AACvC,mDAAmD;AACnD,OAAO"}}]
}